
networks:
  backend:

volumes:
  contract_node_modules:
  frontend_node_modules:
  node_modules:
  root:

services:

  #-------------------------- compila contratos 
  # hacer docker compose run app una vez para 
  #que las dependencias se instalen en 
  #frontend_node_modules
  #El commando ya está en el Dockerfile
  app: &app
    tty: true
    stdin_open: true
    build: ./contract
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
      NODE_OPTIONS: "--openssl-legacy-provider"
      ETHERSCAN_API_KEY: "EDBKYENP4HQJ3B5QAKJXUMDK245521HN7J"
    volumes:
      - ./contract/:/usr/app/contract
      - ./root/.cache/hardhat-nodejs/compilers/linux-amd64:/root/.cache/hardhat-nodejs/compilers/linux-amd64/
      - contract_node_modules:/usr/app/contract/node_modules
      - root:/usr/app/root
      - ./contract/artifacts:/usr/app/contract/artifacts
      - ./root/.cache/hardhat-nodejs/compilers/:/root/.cache/hardhat-nodejs/compilers/
      - ./frontend/src:/usr/app/contract/artifacts/contracts


  
  compile: 
    <<: *app
    tty: true
    stdin_open: true
    #artifacts es importante para nosotros pues necesitamos el código binario
    #para luego hacer deploy en el ganache local
    #usando curl
    #buscar en la carpeta curl ganache-local
    #Esto es porque no funciona hacer deploy a la dirección 0.0.0.0:8545
    #usando el scritps/deploy.js
    #artifacts requiere que sea declarado en hardhat.config.js
    #pues no aparecerán los compilados
    #También hay que colocarlo como mapeo de docker para tener acceso al contenido 
    #Desde fuera de la imagen. De paso que quede grabado en el repositorio
    #module.exports = {
    #olidity: "0.8.9",
    #paths: {
    #rtifacts: './src/artifacts',
    #},
    #etworks: {
    #ardhat: {
    # chainId: 1337
    #}
    #}
    #;
    #volumes:
    #  - ./contract/artifacts:/usr/app/contract/artifacts
    #  - ./root/.cache/hardhat-nodejs/compilers/:/root/.cache/hardhat-nodejs/compilers/
    #- ./frontend/src:/usr/app/contract/artifacts/contracts
      #Este volumen pone los *.json en src de frontend desde donde
      #App.sevelty lo pueda importar
      #Importante: Para ilustar con el contrato CFNFT:
      ## lacompilación crea una carpeta CFNFT.sol/CFNFT.json
    command: "npx hardhat compile --force --verbose"

  #---------------------------------------------
  #
  #
  #-............... ambiente hardhat -----------
  antiguo_test:
    <<: *app
    volumes:
      - ./contract/contracts:/usr/app/contract/contracts
      - ./contract/artifacts:/usr/app/contract/artifacts
      - ./root/.cache/hardhat-nodejs/compilers/linux-amd64:/root/.cache/hardhat-nodejs/compilers/linux-amd64/
      - ./contract/test:/usr/app/contract/test
    command: "npx hardhat test --verbose"

  console:
    <<: *app
    command: "npx hardhat console --verbose"

  test:
    <<: *app
    command: "npx hardhat test --verbose"


  console:
    <<: *app
    command: "npx hardhat console --verbose"


  nodo:
    <<: *app
    tty: true
    stdin_open: true
    hostname: nodo
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
    ports:
      - "8545:8545"
    command:
      - npx
      - hardhat
      - node
    networks:
      backend:

        #deploy:
        # docker exec  contract-nodo-1 npx hardhat run scripts/deploy.js --network localhost --verbose

  #debe declararse una red backend en hardhat.config.js
  deploy: &deploy
    <<: *app
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
    command: "npx hardhat run scripts/deploy.js --network backend --verbose"
    networks:
      backend:
     #debe declararse una red backend en hardhat.config.js
    
  #debe declararse una red backend en hardhat.config.js
  deploy_token_bat: &deploy_token_bat
    <<: *app
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
    command: "npx hardhat run scripts/deploy_token_bat.js --network backend --verbose"
    networks:
      backend:
     #debe declararse una red backend en hardhat.config.js

  #debe declararse una red backend en hardhat.config.js
  deploy_zombie_electrico: &deploy_zombie_electrico
    <<: *app
    command: "npx hardhat run scripts/deploy_zombie_electrico.js --network mainnet --verbose"
    networks:
      backend:
     #debe declararse una red backend en hardhat.config.js



  deploy_ticket_system: &deploy-ticket-system
    <<: *app
    command: "npx hardhat run scripts/deploy_ticket_system.js --network mainnet --verbose"
    networks:
      backend:

  deploy_send_ether: &deploy-send_ether
    <<: *app
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
    command: "npx hardhat run scripts/deploy_send_ether.js --network backend --verbose"
    networks:
      backend:




  goerli: &deploy
    <<: *app
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
    command: "npx hardhat run scripts/deploy_token_bat.js --network goerli --verbose"
    networks:
      backend:

  mainnet: &deploy
    <<: *app
    command: "npx hardhat run scripts/deploy_token_bat.js --network mainnet --verbose"
    networks:
      backend:


  antiguogoerli:
    <<: *deploy
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
    volumes:
      - ./contract/scripts:/usr/app/contract/scripts
      - ./contract/contracts:/usr/app/contract/contracts
      - ./contract/artifacts:/usr/app/contract/artifacts
      - ./root/.cache/hardhat-nodejs/compilers/linux-amd64:/root/.cache/hardhat-nodejs/compilers/linux-amd64/
      - ./contract/test:/usr/app/contract/test

    command: "npx hardhat run scripts/deploy.js --network goerli"


  #Esto implementará todos mis contratos y los dejará como propiedad de la cuenta
  #Que creé para rinkeby que está asociada al nodo público en infura
  #Si no lo hago así, no podré operar libremente con los contratos cuando
  #sean publicados en rinkeby
  antiguo_mainnet:
    <<: *deploy
    environment:
      dapk: "8312700601314f76129d91130b5e9a29b3345a21129a5748b849da51a0934325"
    volumes:
      - ./contract/scripts:/usr/app/contract/scripts
      - ./contract/contracts:/usr/app/contract/contracts
      - ./contract/artifacts:/usr/app/contract/artifacts
      - ./root/.cache/hardhat-nodejs/compilers/linux-amd64:/root/.cache/hardhat-nodejs/compilers/linux-amd64/
      - ./contract/test:/usr/app/contract/test

    command: "npx hardhat run scripts/deploy_mainnet.js --network mainnet"



  fund:
    <<: *app
    command: "npx hardhat run scripts/fund_localhost.js"


  #-------------------------------------------------------
  #
  #---- frontend que se usa para mostrar un botón mint ---
  #---- este frontend es muy complicado
  #---- necesita primero generar un bundle en js
  #---- el que debe interactuar con svelty
  #hacer docker compose run una vez para 
  #que las dependencias se instalen en 
  #frontend_node_modules
  frontend:
    tty: true
    hostname: frontend.example.com
    environment:
      HOST: 0.0.0.0 
    build:
      context: ./frontend
      target: frontend
    ports:
      - "5003:5000"
    volumes:
      - ./frontend/:/usr/app/frontend
      - frontend_node_modules:/usr/app/node_modules
        # ./frontend/src:/usr/app/frontend/src
        # ./frontend/src/TokenBat.sol:/usr/app/frontend/src/TokenBat.sol
    command:
      - npm
      - run 
      - dev
      - -- host
    networks:
      backend:


  #------------- worker de cloudflare que gestiona la imagen del token nft
  #
  #https://hub.docker.com/r/avatarnewyork/wrangler#using-environment-variables       
  worker: &worker
    tty: true
    stdin_open: true
    build:
      context: .
      target: worker
    ports:
      - "9004:9006"
    volumes:
      - ./worker:/usr/app/worker
      - ./worker/.wrangler/config/:/root/.wrangler/config/
    

  #http://0.0.0.0:9004/nft/1
  #en wrangler.toml
  #expeficar la ip y el puerto
  #si necesita combiarlo
  #esto debe coincidier con la línea
  #ports del servicio
  worker-dev:
    <<: *worker
    hostname: nft.alectrico.d
    ports: 
      - "9005:9004"
    volumes:
      - ./worker:/usr/app/worker
      - ./worker/.wrangler/config/:/root/.wrangler/config/
    command:
      - wrangler
      - dev
      - --env=development

  #worker-preview sto abre una IDE para preubas con sede en cloudflare
  #escribir 
  #https://example.com/nft/00000000001.json
  #debe responder con un json
  #{"name":"CFNFT #00000000001.json","description":"CFNFT #00000000001.json","image":"https://cloudflare-ipfs.com/ipfs/Qma6eRuWT27UyCZCCVNpnndzRYWqyQrX4DfdgMCsLs5u8H"}
  worker-preview:
    <<: *worker
    tty: true
    volumes:
      - ./worker:/usr/app/worker
      - ./worker/.wrangler/config/:/root/.wrangler/config/
    ports:
      - "9008:9004"
    command:
      - wrangler
      - preview

  worker-publish:
    <<: *worker
    volumes:
      - ./worker:/usr/app/worker
      - ./worker/.wrangler/config/:/root/.wrangler/config/
    ports:
      - "9007:9004"
    command:
      - wrangler
      - publish

  #No de me deja ingresar comandoso como en un shell
  #Hay que crear una config usando wrangler config
 
  #config path does not exist /root/.wrangler/config/default.toml.
  worker-console:
    <<: *worker
    tty: true
    stdin_open: true
    volumes:
     - ./worker:/usr/app/worker/
    ports:
      - "9006:9004"
    command:
      - wrangler
      - config
      - -c wrangler.toml
      
  #-----------------------------------------




