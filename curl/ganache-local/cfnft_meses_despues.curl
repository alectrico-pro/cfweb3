#https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance
#interactuando con el ganache local para token_bat
#TokeBat es interrogado en el frontend el cual usa
#TokenBat.svelty para ello
#Hay que usar la dirección de deployment que esté allá
#Y el código BINARY que está también en frontend/src/TokenBat.sol/
#El dueño es la cuenta inicial del ganache, pero me gustaría que fuese alectrico.eth
#El tema es que no logro hacerlo con compose.yml, supuestamente lo podría setear con 
#la variable dapk que es referida en hardat.config.js
#pero no lo he poido verificar en las transacciones de Metamask
#
#owner="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
#otro="0x290422ec6eadc2cc12acd98c50333720382ca86b"
echo "--------------------------------------------------------------------"
echo "------------------- CFNFT.sol --------------------------------------"
echo "------------ PROBANDO acceso al ganache local con http, curl--------"
CUENTA_DE_ORIGEN="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
CUENTA_FINAL="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"

#////////////////////////////////// enviar un dinero
#Debe devolver:
#{"jsonrpc":"2.0","id":1,"result":"0x4a9b4bad1f142ad1eda4585e0ae709f34f2c3e59bf79bf85fc7d477323d3086b"}-- Envío de una transacción cualquiera \n
#El campo result contiene el hash de la transacción, el que usaremos posteriormente
#el campo data en este caso debiese ser la orden para transferir traducida a binary
#CUENTA_FINAL="0x290422ec6eadc2cc12acd98c50333720382ca86b"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0", 
  "id": 1,
  "method": "eth_sendTransaction",
  "params": [ 
    { 
      "from": "$CUENTA_DE_ORIGEN", 
      "to": "$CUENTA_FINAL",   
      "gas": "0x76c0",                                      
      "gasPrice": "0x9184e72a000",                          
      "value": "0x9184e72a",                                
      "data": "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"
    }]
}
EOF
echo "-- Envío de una transacción cualquiera \n"


#///////////////////////////////////////////////
#Todo tiene un recibo y me interesa pues lo puedo usar para que el backend
#tenga un soporte para factura iva y enviar rendiciones
#Este recibo usa el hash que generó la operación anterior
#y recibe un json:
#{"jsonrpc":"2.0","id":1,"result":{"transactionHash":"0x2bba2d8d6a6131c10cb177150b8187a458ebad797d25c636cdb962261b69f708","transactionIndex":"0x0","blockHash":"0x9aaa2c2538b8ad2d29b79d69e58d174413f60f694504221d134de638b6a2313c","blockNumber":"0x46","from":"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266","to":"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266","cumulativeGasUsed":"0x5498","gasUsed":"0x5498","contractAddress":null,"logs":[],"logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","type":"0x0","status":"0x1","effectiveGasPrice":"0x9184e72a000"}}-- Recibo de la transacción anterior \n

#// Note que el HASH que uso para obtener la información es el mismo que se obtuvo antes:
#{"jsonrpc":"2.0","id":1,"result":"0x4a9b4bad1f142ad1eda4585e0ae709f34f2c3e59bf79bf85fc7d477323d3086b"}-- Envío de una transacción cualquiera \n



#//Obtención del número de bloques de una transacción usando el hash de la transacción, el que obtuvimos al obtener el recibo
#El número de bloquees es 0x46
#08","transactionIndex":"0x0","blockHash":"0x9aaa2c2538b8ad2d29b79d69e58d174413f60f694504221d134de638b6a2313c","block
HASH="0x2bba2d8d6a6131c10cb177150b8187a458ebad797d25c636cdb962261b69f708"
METODO="eth_getTransactionReceipt"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": ["$HASH"]
}
EOF
echo "-- Recibo de la transacción anterior \n"
curl -X POST \
-H "Content-Type: application/json" \
--data '{"jsonrpc": "2.0", "id": 1, "method": "eth_blockNumber", "params": [], "id":83}' \
"http://127.0.0.1:8545"
#
echo "-- obtención de un bloque de la Blockchain dado por su número de bloque \n"


#//////////////////////////////////////////////////////////////////
#El resultado fue 0x48 pero es diferente de acuerdo al avanze que tenga la blockchain
#{"jsonrpc":"2.0","id":83,"result":"0x48"}-- obtención de un bloque de la Blockchain dado por su número de bloque \n
METODO="eth_getTransactionCount"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": ["$CUENTA_DE_ORIGEN", "latest"]
}
EOF
echo "-- No. transacciones de cuenta de origen, anotadas en último bloque \n"


#////////////////////////////////////////////////
#Obtienen el número de transacciones anotadas. Supongo que debe ser mayor que el número de bloques
#El resultado es muy parecido al anterio.
#{"jsonrpc":"2.0","id":1,"result":"0x44"}-- No. transacciones de cuenta de origen, anotadas en último bloque \n
#Este hash está más arriba, en el recibo de la transacción
BLOCK_HASH="0x9aaa2c2538b8ad2d29b79d69e58d174413f60f694504221d134de638b6a2313c"
METODO="eth_getBlockTransactionCountByHash"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": ["$BLOCK_HASH"]
}
EOF
echo "\n -- Cantidad de transacciones en bloque, el cual es identificado por su HASH \n"


#/////Número de transacciones en un bloque //////////////////////////////////////////////
#Esto no lo podemos encadenar con los resutlados anteriores
#Así que el número de bloque solicitado será uno cualquiera
#Digamos 47 octal:
BLOCK_NUMBER="0x46"
METODO="eth_getBlockTransactionCountByNumber"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": ["$BLOCK_NUMBER"]
}
EOF
echo "-- No. transaciones existentes en No. de bloque \n"



#///////////////////////////////////////////
#El hash de la transacción está arriba
#Se obtiene la transacción que corresponda al hash indicado
#{"jsonrpc":"2.0","id":1,"result":{"blockHash":"0x9aaa2c2538b8ad2d29b79d69e58d174413f60f694504221d134de638b6a2313c","blockNumber":"0x46","from":"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266","gas":"0x76c0","hash":"0x2bba2d8d6a6131c10cb177150b8187a458ebad797d25c636cdb962261b69f708","input":"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675","nonce":"0x41","to":"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266","transactionIndex":"0x0","value":"0x9184e72a","v":"0xa96","r":"0xd85d7f6ef786aa43f5b76b225eb3a55cf0166c5652110866baf8317a68b94f4d","s":"0x421e9a55124a6822be64e7656fc4a3807d6f036e4ffe078e294985ccf82a25dc","type":"0x0","gasPrice":"0x9184e72a000"}}-- Transacción identificada por su hash \n

TX_HASH="0x2bba2d8d6a6131c10cb177150b8187a458ebad797d25c636cdb962261b69f708"
METODO="eth_getTransactionByHash"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": ["$TX_HASH"]
}
EOF
echo "-- Transacción identificada por su hash \n"


#/// Este binary corresponde a la compilación de algún contrato
#Si se quisiera saber el del contrato TokenBat.sol, existe un directorio con ese mismo nombre
#Dentro del cual se pueden obtener el binary
#Este binary corresponde al del ejemplo original de este repositorio: CFNFT.sol
BINARY="0x60806040526000600f60146101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040518060400160405280600581526020017f43464e46540000000000000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f43464e465400000000000000000000000000000000000000000000000000000081525060405180606001604052806025815260200162005f026025913982828160029080519060200190620000cd9291906200060f565b508060039080519060200190620000e69291906200060f565b5050506000600c60006101000a81548160ff02191690831515021790555080600e90805190602001906200011c9291906200060f565b50620001416000801b62000135620001ec60201b60201c565b6200020860201b60201c565b620001827f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a662000176620001ec60201b60201c565b6200020860201b60201c565b620001c37f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620001b7620001ec60201b60201c565b6200020860201b60201c565b505050620001e6620001da620001ec60201b60201c565b6200025060201b60201c565b62000724565b6000620002036200031660201b62001b8d1760201c565b905090565b6200021f8282620003c960201b62001c3e1760201c565b6200024b8160016000858152602001908152602001600020620003df60201b62001c4c1790919060201c565b505050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415620003c257600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050620003c6565b3390505b90565b620003db82826200041760201b60201c565b5050565b60006200040f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200050860201b60201c565b905092915050565b6200042982826200058260201b60201c565b6200050457600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620004a9620001ec60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200051c8383620005ec60201b60201c565b620005775782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506200057c565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b8280546200061d90620006bf565b90600052602060002090601f0160209004810192826200064157600085556200068d565b82601f106200065c57805160ff19168380011785556200068d565b828001600101855582156200068d579182015b828111156200068c5782518255916020019190600101906200066f565b5b5090506200069c9190620006a0565b5090565b5b80821115620006bb576000816000905550600101620006a1565b5090565b60006002820490506001821680620006d857607f821691505b60208210811415620006ef57620006ee620006f5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6157ce80620007346000396000f3fe6080604052600436106102455760003560e01c80636a62784211610139578063a22cb465116100b6578063d53913931161007a578063d53913931461087e578063d547741f146108a9578063e63ab1e9146108d2578063e985e9c5146108fd578063f2fde38b1461093a578063f47c84c51461096357610245565b8063a22cb4651461079b578063b66a0e5d146107c4578063b88d4fde146107db578063c87b56dd14610804578063ca15c8731461084157610245565b80639010d07c116100fd5780639010d07c146106af57806391d14854146106ec57806395d89b4114610729578063a140ae2314610754578063a217fddf1461077057610245565b80636a627842146105f057806370a0823114610619578063715018a6146106565780638456cb591461066d5780638da5cb5b1461068457610245565b80632f2ff15d116101c757806342966c681161018b57806342966c681461050b5780634f6ccce71461053457806355367ba9146105715780635c975abb146105885780636352211e146105b357610245565b80632f2ff15d1461043c5780632f745c591461046557806336568abe146104a25780633f4ba83a146104cb57806342842e0e146104e257610245565b8063095ea7b31161020e578063095ea7b31461035757806318160ddd146103805780631c8b232d146103ab57806323b872dd146103d6578063248a9ca3146103ff57610245565b8062923f9e1461024a57806301ffc9a71461028757806303824f76146102c457806306fdde03146102ef578063081812fc1461031a575b600080fd5b34801561025657600080fd5b506102716004803603"
echo "--- Obtención en otro lado make -- compile (ambiente hardhat) -, del código binario del contrato: CFNFT.sol \n"

#Saber cuanto me costará hacer deploy del contrato
METODO="eth_estimateGas"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": [{"from": "$CUENTA_DE_ORIGEN", "data": "$BINARY"}]
}
EOF
#respuesta es:
#{"jsonrpc":"2.0","id":1,"result":"0x1959e"}
#0x1959e GWEI en hexadecimal
##{"jsonrpc":"2.0","id":1,"result":"0x4bc5b8"}-
#0x4bc5b8 GWEI en hexadecimal
#4965816 GWEI en decimal
#aproximamdamente 5000 clp me sale el deploy
#
#Otra respuesta: y es difrente ?
#{"jsonrpc":"2.0","id":1,"result":"0x4bc5b8"}--- Estimación qty Gas que consumirá el envió de la transacción con el binary \n
echo "--- Estimación qty Gas que consumirá el envió de la transacción con el binary \n"

#Para hacer el deploy debe anotar un valor en gas superior al estimado obtenido
#La cuenta de origen será la dueña del contrato que sea implementado (deployed)
#Esto hace el deploy
METODO="eth_sendTransaction"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": [{"from": "$CUENTA_DE_ORIGEN", "gas": "0x5c31e2",  "data": "$BINARY"}]
}
EOF
echo "-- DEPLOY: Envío de transacción con el binario  \n"
#Nota: gas debe ser un valor lo suficientemente grande para suplir la estimación obtenida en el paso anterior, es decir: mayor que 0x4bc5b8
#El hash de la transacción. Esto cambia con cada corrida
HASH="0xa55a4aea27f5799983afbc3d2f0edbc9506a3805023517b5181ef98ea4b1d6d6"
METODO="eth_getTransactionReceipt"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "$METODO",
  "params": ["$HASH"]
}
EOF
echo "-- Recibo de transacción con el binario  \n"
#
#respuesta para este caso (CFNFT.sol) es:
#{"jsonrpc":"2.0","id":1,"result":{"transactionHash":"0x82f15f3a96591fdc64c4e169239bbb216e2cb83198ace661d10657bcaea405c7","transactionIndex":"0x0","blockHash":"0x3ed5cc3959d6f49929f1bd551ed6905c5961c89fcb20644aaaf941c7f59f1c42","blockNumber":"0x2b","from":"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266","to":null,"cumulativeGasUsed":"0x1c31e2","gasUsed":"0x1c31e2","contractAddress":"0x99bba657f2bbc93c02d617f8ba121cb8fc104acf","logs":[],"logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","type":"0x2","status":"0x0","effectiveGasPrice":"0x3bd9b479"}}-

#segundo intento, luego de reiniciar el pc, parece que sí, que sí es bueno
#{"jsonrpc":"2.0","id":1,"result":{"transactionHash":"0xb19629537374e0ac8fcd8b45a96d1b35e9b3d66f2217e25271a17ff936b92be4","transactionIndex":"0x0","blockHash":"0x98dbe15015b2300a8a923667ca2504882de24208bf48bb26dffd3936a1672ad8","blockNumber":"0x5","from":"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266","to":null,"cumulativeGasUsed":"0x4bc5b8","gasUsed":"0x4bc5b8","contractAddress":"0xdc64a140aa3e981100a9beca4e685f962f0cf6c9","logs":[{"removed":false,"logIndex":"0x0","transactionIndex":"0x0","transactionHash":"0xb19629537374e0ac8fcd8b45a96d1b35e9b3d66f2217e25271a17ff936b92be4","blockHash":"0x98dbe15015b2300a8a923667ca2504882de24208bf48bb26dffd3936a1672ad8","blockNumber":"0x5","address":"0xdc64a140aa3e981100a9beca4e685f962f0cf6c9","data":"0x","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]},{"removed":false,"logIndex":"0x1","transactionIndex":"0x0","transactionHash":"0xb19629537374e0ac8fcd8b45a96d1b35e9b3d66f2217e25271a17ff936b92be4","blockHash":"0x98dbe15015b2300a8a923667ca2504882de24208bf48bb26dffd3936a1672ad8","blockNumber":"0x5","address":"0xdc64a140aa3e981100a9beca4e685f962f0cf6c9","data":"0x","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]},{"removed":false,"logIndex":"0x2","transactionIndex":"0x0","transactionHash":"0xb19629537374e0ac8fcd8b45a96d1b35e9b3d66f2217e25271a17ff936b92be4","blockHash":"0x98dbe15015b2300a8a923667ca2504882de24208bf48bb26dffd3936a1672ad8","blockNumber":"0x5","address":"0xdc64a140aa3e981100a9beca4e685f962f0cf6c9","data":"0x","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]},{"removed":false,"logIndex":"0x3","transactionIndex":"0x0","transactionHash":"0xb19629537374e0ac8fcd8b45a96d1b35e9b3d66f2217e25271a17ff936b92be4","blockHash":"0x98dbe15015b2300a8a923667ca2504882de24208bf48bb26dffd3936a1672ad8","blockNumber":"0x5","address":"0xdc64a140aa3e981100a9beca4e685f962f0cf6c9","data":"0x","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]}],"logsBloom":"0xtype":"0x2","status":"0x1","effectiveGasPrice":"0x5ba454f8"}}-- Recibo de transacción con el binario  \n


#Un resultado unos meses después
#{"jsonrpc":"2.0","id":1,"result":{"transactionHash":"0xa55a4aea27f5799983afbc3d2f0edbc9506a3805023517b5181ef98ea4b1d6d6","transactionIndex":"0x0","blockHash":"0xf97abd5e5a1b7fafc6d913b55ea1114a7bb62ffee15af886614acd273aad6407","blockNumber":"0x55","from":"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266","to":null,"cumulativeGasUsed":"0x4bc5b8","gasUsed":"0x4bc5b8","contractAddress":"0x172076e0166d1f9cc711c77adf8488051744980c","logs":[{"removed":false,"logIndex":"0x0","transactionIndex":"0x0","transactionHash":"0xa55a4aea27f5799983afbc3d2f0edbc9506a3805023517b5181ef98ea4b1d6d6","blockHash":"0xf97abd5e5a1b7fafc6d913b55ea1114a7bb62ffee15af886614acd273aad6407","blockNumber":"0x55","address":"0x172076e0166d1f9cc711c77adf8488051744980c","data":"0x","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]},{"removed":false,"logIndex":"0x1","transactionIndex":"0x0","transactionHash":"0xa55a4aea27f5799983afbc3d2f0edbc9506a3805023517b5181ef98ea4b1d6d6","blockHash":"0xf97abd5e5a1b7fafc6d913b55ea1114a7bb62ffee15af886614acd273aad6407","blockNumber":"0x55","address":"0x172076e0166d1f9cc711c77adf8488051744980c","data":"0x","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]},{"removed":false,"logIndex":"0x2","transactionIndex":"0x0","transactionHash":"0xa55a4aea27f5799983afbc3d2f0edbc9506a3805023517b5181ef98ea4b1d6d6","blockHash":"0xf97abd5e5a1b7fafc6d913b55ea1114a7bb62ffee15af886614acd273aad6407","blockNumber":"0x55","address":"0x172076e0166d1f9cc711c77adf8488051744980c","data":"0x","topics":["0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]},{"removed":false,"logIndex":"0x3","transactionIndex":"0x0","transactionHash":"0xa55a4aea27f5799983afbc3d2f0edbc9506a3805023517b5181ef98ea4b1d6d6","blockHash":"0xf97abd5e5a1b7fafc6d913b55ea1114a7bb62ffee15af886614acd273aad6407","blockNumber":"0x55","address":"0x172076e0166d1f9cc711c77adf8488051744980c","data":"0x","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"]}],"logsBloom":"0x0000000400000000000000000000000000000000000000000080000000000000000000000000000000000000000000400000000000800000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000012000000000000010000080000000000000000000000000000100040000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000200000000000000000001000002000000100002000000020000000000000000000000000000000000000000400000000000000000000000000","type":"0x2","status":"0x1","effectiveGasPrice":"0x3b9b80f4"}}
#Se observa un valor no nulo para la dirección del contrato, con lo que debemos entender que existen el contrato en el ganache
#Usar la dirección del contrato para interactuar con este. Está en contractAddress
DIRECCION_DEL_CONTRATO="0x172076e0166d1f9cc711c77adf8488051744980c"


#-..........................................................................................................
#

#Ahora podemos interactuar con un contracto, pero solo está el que hice para el contrato Multiply
#Revisar archivo multiply.curl
#Lo primero en este caso es encontrar el binary para este otro contrato. No tiene nada que ver con todo lo
#anterior
#Se debe enviar una trasnaccion desde nuestra cuenta hacia la dirección del contrato
#eth_sendTransaction requires several arguments, specifically from, to and data. From is the public address of our account, and to is the contract address. The data argument contains a payload that defines which method must be called and with which arguments. This is where the ABI (application binary interface) comes into play. The ABI is a JSON file that defines how to define and encode data for the EVM.
#
#The bytes of the payload defines which method in the contract is called. This is the first 4 bytes from the Keccak hash over the function name and its argument types, hex encoded. The multiply function accepts an uint which is an alias for uint256. This leaves us with:
#eb3.sha3("multiply(uint256)").substring(0, 10)
#esto no funciona aquí pero seguramente si lo hará desde la interaface javascript
#
#el resultado es:
#0xc6888fa1
#ultiply(uint256)
MULTIPLY="0xc6888fa1"
#AMULTIPLY HAY QUE SUMARLE LOS ARGUMENTOS: EN ESTE CASO ES UN SOLO ARGUMENTO, UN NÚMERO 6 PERO EXPRESADO COMO UN ENTERO SIN SIGNO DE 256 BITES
#
#web3.sha3("multiply(uint256)").substring(0, 10)

#// "0xc6888fa1"


#The next step is to encode the arguments. There is only one uint256, say, the value 6. The ABI has a section which specifies how to encode uint256 types.

#int<M>: enc(X) is the big-endian two’s complement encoding of X, padded on the higher-order (left) side with 0xff for negative X and with zero > bytes for positive X such that the length is a multiple of 32 bytes.

#This encodes to 0000000000000000000000000000000000000000000000000000000000000006.

#Combining the function selector and the encoded argument our data will be 0xc6888fa10000000000000000000000000000000000000000000000000000000000000006.

#////////////////////////////////////////////
CUENTA_DE_ORIGEN="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
CUENTA_FINAL="0x290422ec6eadc2cc12acd98c50333720382ca86b"
curl -X POST \
-H "Content-Type: application/json" \
"http://127.0.0.1:8545" \
--data @/dev/stdin<<EOF
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "eth_sendTransaction",
  "params": [
    {
      "from": "$CUENTA_DE_ORIGEN",
      "to": "$DIRECCION_DEL_CONTRATO",
      "data": "0xc6888fa10000000000000000000000000000000000000000000000000000000000000006"
    }]
}
EOF
echo "-- Envío cualquiera hacía la dirección del contracto \n"

echo "---------------------------------- FIN --------------------------------------------------------"
